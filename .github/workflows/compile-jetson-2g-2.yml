name: compile-jetson-2g-2

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/compile-jetson-2g-2.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build on native aarch64

    steps:
      - uses: actions/checkout@v3

      - name: Download base image
        run: |
          wget -nv https://developer.nvidia.com/embedded/l4t/r32_release_v7.1/jp_4.6.1_b110_sd_card/jetson_nano_2gb/jetson-nano-2gb-jp461-sd-card-image.zip -O image.zip
          
      - name: Extract base image
        run: |
          unzip image.zip  # extracts "sd-blob.img"
          rm image.zip

      - name: Setup cross compiler
        run: |
          <<'comment'
          wget -nv https://developer.nvidia.com/embedded/dlc/l4t-gcc-toolchain-64-bit-28-3 -O gcc-4.8.5-aarch64.tar.gz
          tar xf gcc-4.8.5-aarch64.tar.gz
          mv install toolchain
          rm gcc-4.8.5-aarch64.tar.gz
          comment
          
          sudo apt install -y gcc-8-aarch64-linux-gnu g++-8-aarch64-linux-gnu binutils-aarch64-linux-gnu

      - name: Install QEMU
        run: |
          sudo apt-get -o Acquire::Languages=none update
          sudo apt-get install -y --no-install-recommends arch-test qemu-user-static

      - name: Mount
        run: |
          offset=`sgdisk --print sd-blob.img | awk '{if($1==1){print $2*512}}'`

          mkdir -p overlay/{lower,upper,work} mnt
          sudo mount -t ext4 -o loop,offset=${offset},ro sd-blob.img overlay/lower
          sudo mount -t overlay -o lowerdir=overlay/lower,upperdir=overlay/upper,workdir=overlay/work overlay mnt

          sudo mount -t proc /proc mnt/proc
          sudo mount -t sysfs /sys mnt/sys
          sudo mount -o bind /dev mnt/dev
          sudo mount -o bind /run mnt/run

      - name: Settings
        run: |
          sudo cp /usr/bin/qemu-aarch64-static mnt/usr/bin/qemu-aarch64-static
          sudo cp --remove-destination /etc/resolv.conf mnt/etc/resolv.conf
          sudo sed -i -e 's/<SOC>/t210/g' mnt/etc/apt/sources.list.d/nvidia-l4t-apt-source.list

      - name: Install packages
        run: |
          sudo apt-get install -y \
            apt-transport-https build-essential ca-certificates \
            cmake curl git ninja-build \
            python3-dev python3-pip python3-venv software-properties-common sudo \
            unzip virtualenv wget \
            ccache

          cd mnt
          
          sudo rm etc/apt/apt.conf.d/50appstream  # no icons update
          sudo chroot . /bin/bash <<'chroot_end'
            apt-get -o Acquire::Languages=none update
            apt-get install --download-only -y \
              apt-transport-https build-essential ca-certificates \
              cmake curl git \
              libatlas-base-dev libcurl4-openssl-dev libjemalloc-dev \
              liblapack-dev libopencv-dev \
              libzmq3-dev ninja-build \
              python3.8-dev software-properties-common sudo \
              unzip virtualenv wget \
              libjpeg-dev libopenblas-dev libopenmpi-dev libomp-dev
          chroot_end
          
          # apt in chroot hungs
          for deb in var/cache/apt/archives/*.deb ; do
            echo "extracting $deb ..."
            ar x $deb data.tar.xz
            [ -f data.tar.xz ] || continue
            sudo tar -xf data.tar.xz --no-overwrite-dir -C ./
            rm data.tar.xz
          done

      - name: Clone source code
        run: |
          git clone --depth=1 --recursive --branch=v1.11.0 https://github.com/pytorch/pytorch.git mnt/src

      - name: Install pip
        run: |
          cd mnt

          sudo wget -nv https://bootstrap.pypa.io/get-pip.py

          # sudo python3.8 get-pip.py
          sudo python3 -m pip install -U pip
          sudo python3 -m pip install -U setuptools wheel Cython crossenv

          # <<'comment'
          sudo chroot . /bin/bash <<'chroot_end'
            python3.8 /get-pip.py
            python3.8 -m pip install -U pip
            python3.8 -m pip install -U setuptools wheel Cython
          chroot_end
          # comment

          sudo rm get-pip.py

      - name: Cross compile
        run: |
          CROSS_ROOT=${PWD}/mnt
          <<'comment'
          CROSS_COMPILE=${PWD}/toolchain/bin
          export CC=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-gcc
          export CXX=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-g++
          export LD=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-ld
          export AR=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-ar
          export AS=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-as
          export RANLIB=${CROSS_COMPILE}/aarch64-unknown-linux-gnu-ranlib
          comment
          
          export CC=/usr/bin/aarch64-linux-gnu-gcc-8
          export CXX=/usr/bin/aarch64-linux-gnu-g++-8
          export LD=/usr/bin/aarch64-linux-gnu-ld
          export AR=/usr/bin/aarch64-linux-gnu-ar-8
          export AS=/usr/bin/aarch64-linux-gnu-as
          export RANLIB=/usr/bin/aarch64-linux-gnu-ranlib-8
          
          export NVCC=${CROSS_ROOT}/usr/local/cuda/bin/nvcc

          export LDFLAGS+=" -L${CROSS_ROOT}/lib -L${CROSS_ROOT}/usr/local/cuda/lib64 -L${CROSS_ROOT}/usr/lib -L${CROSS_ROOT}/usr/lib/aarch64-linux-gnu -L${CROSS_ROOT}/lib/aarch64-linux-gnu"
          export CFLAGS+=" -I${CROSS_ROOT}/include -I${CROSS_ROOT}/usr/local/cuda/include -I${CROSS_ROOT}/usr/include -I${CROSS_ROOT}/usr/include/aarch64-linux-gnu"
          
          export USE_OPENCV=1 USE_BLAS=openblas USE_CUDA=1 USE_CUDA_PATH=/usr/local/cuda USE_CUDNN=1
          export CUDA_TOOLKIT_ROOT_DIR=${CROSS_ROOT}/usr/local/cuda/targets/aarch64-linux
          
          # export CMAKE_SYSROOT=${CROSS_ROOT}
          export CMAKE_CXX_COMPILER=${CXX}
          export CMAKE_C_COMPILER=${CC}
          #export CMAKE_CROSSCOMPILING=True
          export BUILD_PYTORCH_MOBILE_WITH_HOST_TOOLCHAIN=True
          #export USE_SYSTEM_BENCHMARK=True
          export CMAKE_SYSTEM_PROCESSOR=aarch64
          
          # patch benchmark
          sed -i -e 's@RUN_${FEATURE} EQUAL 0@RUN_${FEATURE} EQUAL 0 OR COMPILE_${FEATURE}@g' mnt/src/third_party/benchmark/cmake/CXXFeatureCheck.cmake
          
          # fix absolute link
          sudo rm ${CROSS_ROOT}/usr/local/cuda ${CROSS_ROOT}/usr/local/cuda-10
          sudo ln -s ${CROSS_ROOT}/usr/local/cuda-10{.2,}
          sudo ln -s ${CROSS_ROOT}/usr/local/cuda{-10,}
          
          # lib dir link
          #sudo mv /lib/aarch64-linux-gnu{,.bak}
          #sudo ln -s ${CROSS_ROOT}/lib/aarch64-linux-gnu /lib/aarch64-linux-gnu
          #sudo mv /usr/lib/aarch64-linux-gnu{,.bak}
          #sudo ln -s ${CROSS_ROOT}/usr/lib/aarch64-linux-gnu /usr/lib/aarch64-linux-gnu
          mkdir -p overlay_lib/{upper,work}
          sudo mount -t overlay -o lowerdir=${CROSS_ROOT}/lib/aarch64-linux-gnu:${CROSS_ROOT}/usr/lib/aarch64-linux-gnu,upperdir=overlay_lib/upper,workdir=overlay_lib/work overlay /lib/aarch64-linux-gnu

          python3 -m crossenv ${CROSS_ROOT}/usr/bin/python3.8 venv \
            --cc ${CC} \
            --cxx ${CXX} \
            --ar ${AR}
          
          . venv/bin/activate
          
          cross-pip install -U pip
          cross-pip install -U setuptools wheel Cython
          build-pip install -U pip
          build-pip install -U setuptools wheel Cython

          cd mnt/src

          cross-pip install -r requirements.txt || true
          build-pip install -r requirements.txt

          mkdir build
          cd build

          cross-pip wheel ..
          cross-pip wheel --requirement ../requirements.txt || true  # store depending wheels (throws errors for numpy, psutils)

      - name: Collect built file
        run: |
          sudo mv mnt/src/build build

      - name: Unmount
        run: |
          sudo rm mnt/usr/bin/qemu-aarch64-static

          sudo umount -lf mnt/run
          sudo umount -lf mnt/dev
          sudo umount -lf mnt/sys
          sudo umount -lf mnt/proc
          sudo umount -lf mnt
          sudo umount -lf overlay/lower

      - name: Archive
        run: |
          7z a build.tar.xz build

      - name: Info
        run: |
          file build.tar.xz
          sha256sum build.tar.xz

      - name: Store built file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: built-artifact
          path: build.tar.xz

      - name: Install apt-file
        if: failure()
        run: |
          sudo apt-get install -y apt-file
          sudo apt-file update
        
      - name: Waiting for debugger
        if: failure()
        uses: mxschmitt/action-tmate@v3
