name: qemu_debian

on:
    push:
      branches: [ main ]
      paths:
        - 'qemu_debian/**'
        - '.github/workflows/qemu_debian.yml'
    workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
  
    steps:
      - uses: actions/checkout@v3

      - name: get storage info
        run: |
            free -h
            df -h
            
      - name: Run a multi-line script
        run: |
            echo "path-exclude=/usr/share/man/*" | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
            sudo apt-get install -y --no-install-recommends qemu-utils libguestfs-tools mmdebstrap grub-efi-amd64
            # wget -nc -nv https://github.com/kawanakaiku/test-ci/releases/download/files/edk2-x86_64-code.fd
            # wget -nc -nv https://github.com/kawanakaiku/test-ci/releases/download/archlinux/archlinux-2022.06.01-x86_64.iso
            wget -nc https://github.com/kawanakaiku/test-ci/releases/download/debian/EFI.7z
            qemu-img create -f qcow2 qemu_debian.img 32G
            # python3 qemu_arch/build.py
            # sudo virt-sparsify qemu_debian.img --convert qcow2 qemu_debian2.img && mv qemu_debian2.img qemu_debian.img
            
            sudo modprobe nbd max_part=63
            sudo qemu-nbd -c /dev/nbd0 qemu_debian.img
            echo -n 'g,n,,,+100M,t,1,n,,,,w,' | sed -e 's/,/\n/g' | sudo fdisk /dev/nbd0
            lsblk

            sudo mkfs.fat -F 32 /dev/nbd0p1
            sudo mkfs.ext4 -O ^has_journal,^64bit,^metadata_csum /dev/nbd0p2
            UUID_EFI=`sudo blkid /dev/nbd0p1 | perl -n -e'/UUID="(.*?)"/ && print $1'`
            UUID_ROOT=`sudo blkid /dev/nbd0p2 | perl -n -e'/UUID="(.*?)"/ && print $1'`
            echo "UUID_EFI=${UUID_EFI}"
            echo "UUID_ROOT=${UUID_ROOT}"
            sudo mount -t ext4 -o noatime,nobarrier /dev/nbd0p2 /mnt
            sudo mkdir -p /mnt/boot/efi
            sudo mount -t vfat -o noatime /dev/nbd0p1 /mnt/boot/efi

            sudo mkdir /_mnt
            sudo mmdebstrap --components="main restricted universe multiverse" \
                --variant=apt --architecture=amd64 \
                --dpkgopt='path-exclude=/usr/share/man/*' \
                --dpkgopt='path-exclude=/usr/share/locale/*/LC_MESSAGES/*.mo' \
                --dpkgopt='path-exclude=/usr/share/doc/*' \
                jammy /_mnt http://azure.archive.ubuntu.com/ubuntu
                
            cat <<EOF | gawk '{if(NR==1){match($0, /^\s*/);s=RLENGTH+1};print substr($0, s)}' | sudo tee /_mnt/etc/fstab
                UUID=${UUID_ROOT} / ext4 errors=remount-ro,noatime,nobarrier 0 0
                UUID=${UUID_EFI} /boot/efi vfat noatime 0 0
            EOF
            
            sudo mkdir /_mnt/boot/{efi,grub}
            sudo 7z x EFI.7z -O/_mnt/boot/efi/
            
            cat <<EOF | gawk '{if(NR==1){match($0, /^\s*/);s=RLENGTH+1};print substr($0, s)}' | sudo tee /_mnt/boot/efi/EFI/debian/grub.cfg
                search.fs_uuid ${UUID_ROOT} root
                configfile (\$root)'/boot/grub/grub.cfg'
            EOF
            
            cat <<EOF | gawk '{if(NR==1){match($0, /^\s*/);s=RLENGTH+1};print substr($0, s)}' | sudo tee /_mnt/boot/grub/grub.cfg
                set timeout=0
                set default=0
                menuentry 'Debian GNU/Linux' {
                    echo	'Loading Linux ...'
                    linux	/boot/vmlinuz root=UUID=${UUID_ROOT} ro quiet
                    echo	'Loading initial ramdisk ...'
                    initrd	/boot/initrd.img
                }
                menuentry 'System setup' {
                    fwsetup
                }
            EOF
            
            sudo mount -t proc none /_mnt/proc/
            sudo mount -t devtmpfs none /_mnt/dev/
            sudo mount -t sysfs none /_mnt/sys/
            
            sudo chroot /_mnt apt-get update
            sudo chroot /_mnt apt-get install -y --no-install-recommends linux-image-kvm initramfs-tools e2fsprogs
            sudo chroot /_mnt sh -c 'update-initramfs -c -k all'
            for i in /_mnt/boot/vmlinuz-* ; do sudo mv ${i} ${i}.keep ; done
            
            sudo chroot /_mnt apt-get clean
            sudo find /_mnt/var/lib/apt/lists -type f -exec rm -vf {} \;
            echo 'Yes, do as I say!' | sudo chroot /_mnt apt-get purge --auto-remove -y --allow-remove-essential apt linux-image-kvm initramfs-tools e2fsprogs
            
            for i in /_mnt/boot/vmlinuz-*.keep ; do sudo mv ${i} ${i:0:-5} ; done
            
            df -h
            sudo sync
            sudo umount -lf /_mnt/sys /_mnt/proc /_mnt/dev
            
            sudo cp --archive --no-clobber /_mnt/boot/efi/. /mnt/boot/efi
            sudo cp --archive --no-clobber /_mnt/. /mnt
            sudo umount /mnt/boot/efi /mnt

            sudo qemu-nbd --disconnect /dev/nbd0 
            sudo killall --wait qemu-nbd || true
            # sudo modprobe -r nbd
            ls -lha
            7z a -mx=9 qemu_debian.img.7z qemu_debian.img
            ls -lha qemu_debian.img.7z
            
      - name: Store 7z files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: debian_img
          path: qemu_debian.img.7z

