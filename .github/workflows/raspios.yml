name: raspios

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/raspios.yml'
  workflow_dispatch:
  
env:
  img_url: 'https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2022-04-07/2022-04-04-raspios-bullseye-arm64.img.xz'
  img_name: '2022-04-04-raspios-bullseye-arm64'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Set current datetime as env variable
        env:
          TZ: 'Asia/Tokyo'
        run: |
          echo "img_orig=${{ env.img_name }}.img" >> $GITHUB_ENV
          echo "img_mod=${{ env.img_name }}_$(date +'%Y-%m-%d-%H-%M-%S').img" >> $GITHUB_ENV
        
      - name: Download base image
        run: |
          wget -nc -nv -O - ${{ env.img_url }} |
            unxz > ${{ env.img_orig }}
          
      - name: Extract base image
        run: |
          disk_json="$( sfdisk --json ${{ env.img_orig }} | jq .partitiontable )"
          disk_sectorsize=$( echo "${disk_json}" | jq --raw-output .sectorsize )
          disk_part_0_start=$( echo "${disk_json}" | jq --raw-output .partitions[0].start )
          disk_part_1_start=$( echo "${disk_json}" | jq --raw-output .partitions[1].start )
          disk_part_0_offset=$(( ${disk_sectorsize} * ${disk_part_0_start} ))
          disk_part_1_offset=$(( ${disk_sectorsize} * ${disk_part_1_start} ))

          # 7z x ${{ env.img_orig }} -Oimg
          
      - name: Install QEMU
        run: |
          sudo apt-get -o Acquire::Languages=none update
          sudo apt-get install -y --no-install-recommends arch-test qemu-user-static qemu-utils
          sudo modprobe nbd max_part=63
          
      - name: Mount
        run: |
          sudo qemu-nbd -c /dev/nbd1 --format=raw ${{ env.img_orig }}
          
          mkdir -p overlay0/{lower,upper,work,mnt}
          mkdir -p overlay1/{lower,upper,work,mnt}
          sudo mount -t vfat -o noatime /dev/nbd1p1 overlay0/mnt
          sudo mount -t ext4 -o ro /dev/nbd1p2 overlay1/lower
          # sudo mount -t overlay -o lowerdir=overlay0/lower,upperdir=overlay0/upper,workdir=overlay0/work overlay overlay0/mnt
          sudo mount -t overlay -o lowerdir=overlay1/lower,upperdir=overlay1/upper,workdir=overlay1/work overlay overlay1/mnt
          
          mkdir mnt
          sudo mount --bind overlay1/mnt mnt
          sudo mount --bind overlay0/mnt mnt/boot
          
          sudo mount -t proc /proc mnt/proc
          sudo mount -t sysfs /sys mnt/sys
          sudo mount -o bind /dev mnt/dev
          sudo mount -o bind /dev/pts mnt/dev/pts
          sudo mount -o bind /run mnt/run
          
      - name: Settings
        run: |
          cd mnt
        
          sudo cp /usr/bin/qemu-aarch64-static usr/bin/qemu-aarch64-static
          sudo mv etc/resolv.conf{,.bak}
          sudo cp /etc/resolv.conf etc/resolv.conf
          
          sudo sed -i -E 's@^# (ja_JP\.UTF-8 UTF-8)@\1@g' etc/locale.gen
          
      - name: tweaks
        run: |
          cd mnt
          
          echo 'Acquire::Languages "none";' | sudo tee etc/apt/apt.conf.d/9999translations
          
          echo 'tmpfs /tmp tmpfs defaults,noatime,mode=1777' | sudo tee -a etc/fstab
          echo 'tmpfs /var/tmp tmpfs defaults,noatime,mode=1777' | sudo tee -a etc/fstab
          echo 'tmpfs /var/log tmpfs defaults,noatime,mode=1777' | sudo tee -a etc/fstab
          echo 'tmpfs /var/cache tmpfs defaults,noatime,mode=1777' | sudo tee -a etc/fstab
          sudo sed -i -E 's/\s+/ /g' etc/fstab
          sudo sed -i -E 's/^(.*)[0-9]+/\10/g' etc/fstab
          sudo sed -i -e 's/vfat defaults,flush/vfat defaults,noatime/g' etc/fstab
          sudo sed -i -E 's/(ext4 defaults,noatime)/\1,nobarrier/g' etc/fstab

          sudo rm -rf home/pi/Bookshelf
  
      - name: Waiting for debugger
        if: failure()
        uses: mxschmitt/action-tmate@v3
       
          
      - name: apt update
        run: |
          sudo chroot mnt <<'CHROOT'
          apt-get update
          CHROOT
          
      - name: apt upgrade
        run: |
          sudo chroot mnt <<'CHROOT'
          apt-get update
          apt-get install -y wget ncdu htop
          apt-get upgrade -y
          apt-get purge --auto-remove -y
          apt-get clean
          CHROOT
          
      - name: tweaks
        run: |
          sudo chroot mnt <<'CHROOT'
          for service in apt-daily-upgrade.service apt-daily-upgrade.timer apt-daily.service apt-daily.timer e2scrub@.service e2scrub_all.service e2scrub_all.timer e2scrub_fail@.service e2scrub_reap.service fstrim.service fstrim.timer logrotate.service logrotate.timer man-db.service man-db.timer
          do
          systemd mask ${service}
          done
          CHROOT
          
      - name: pip update
        run: |
          sudo chroot mnt <<'CHROOT'
          # python3 -m pip list -o | tail -n +3 | awk '{ print $1 }' | xargs python3 -m pip install -U
          CHROOT
            
      - name: Revert settings and unbind
        run: |
          sudo rm mnt/usr/bin/qemu-aarch64-static
          sudo rm mnt/etc/resolv.conf
          sudo mv mnt/etc/resolv.conf{.bak,}
          
          sudo umount -lf mnt/run
          sudo umount -lf mnt/dev/pts
          sudo umount -lf mnt/dev
          sudo umount -lf mnt/sys
          sudo umount -lf mnt/proc
          
          sudo umount -lf mnt/boot
          sudo umount -lf mnt
          
      - name: Disk modify
        run: |
          part0_size_mb=`sudo du --summarize --block-size=1M overlay0/mnt | awk '{print $1+100}'`
          part1_size_mb=`sudo du --summarize --block-size=1M overlay1/mnt | awk '{print $1+100}'`
          img_size_mb=$(( ${part0_size_mb} + ${part1_size_mb} ))

          echo "part0_size_mb=${part0_size_mb}"
          echo "part1_size_mb=${part1_size_mb}"
          echo "img_size_mb=${img_size_mb}"

          fallocate -l ${img_size_mb}M ${{ env.img_mod }}

          echo -n "o,n,p,1,,+${part0_size_mb}M,t,c,n,p,2,,,w," | sed -e 's/,/\n/g' | fdisk ${{ env.img_mod }}

          PARTUUID=$( sfdisk --json ${{ env.img_mod }} | jq -r .partitiontable.id | tail -c+3 )

          echo "PARTUUID=${PARTUUID}"

          sed_cmd='s@(PARTUUID=)[^-]+@\1'
          sed_cmd+="${PARTUUID}"
          sed_cmd+='@g'

          sudo sed -i -E "${sed_cmd}" overlay1/mnt/etc/fstab
          sudo sed -i -E "${sed_cmd}" overlay0/mnt/cmdline.txt

          sudo qemu-nbd -c /dev/nbd0 --format=raw ${{ env.img_mod }}

          sudo mkfs.fat -F 32 /dev/nbd0p1
          sudo mkfs.ext4 -O ^has_journal,^64bit,^metadata_csum -m 0 /dev/nbd0p2

          UUID_PART_0=`sudo blkid /dev/nbd0p1 | perl -n -e'/UUID="(.*?)"/ && print $1'`
          UUID_PART_1=`sudo blkid /dev/nbd0p2 | perl -n -e'/UUID="(.*?)"/ && print $1'`
          echo "UUID_PART_0=${UUID_PART_0}"
          echo "UUID_PART_1=${UUID_PART_1}"

          mkdir mod_part{0,1}

          sudo mount -t vfat -o noatime /dev/nbd0p1 mod_part0
          sudo mount -t ext4 -o noatime,nobarrier /dev/nbd0p2 mod_part1

          sudo cp -a overlay0/mnt/. mod_part0/.
          sudo cp -a overlay1/mnt/. mod_part1/.

          df -h
          lsblk

          sudo umount mod_part{0,1}
          rm -rf mod_part{0,1}

          sudo qemu-nbd --disconnect /dev/nbd0

      - name: Unmount
        run: |
          sudo umount -lf overlay1/mnt
          sudo umount -lf overlay0/mnt
          sudo umount -lf overlay1/lower
          # sudo umount -lf overlay0/lower
          
          sudo qemu-nbd --disconnect /dev/nbd1

      - name: Build file
        run: |
            xz -e9 ${{ env.img_mod }}  # creates ${{ env.img_mod }}.xz

      - name: Store built file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.img_mod }}.xz
          path: ${{ env.img_mod }}.xz
          
