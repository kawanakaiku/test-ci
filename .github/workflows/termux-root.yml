name: termux-root
on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/termux-root.yml'
  workflow_dispatch:
env:
  TERMUX_PREFIX: /data/data/com.termux/files/usr
  TERMUX_HOME: /data/data/com.termux/files/home
  TERMUX_ARCH: aarch64
  VERSION: 31
  PIP_DISABLE_PIP_VERSION_CHECK: 1
jobs:
  get_system:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        TERMUX_ARCH: [aarch64, x86_64]
    env:
      LPUNPACK: otatools/bin/lpunpack
      TERMUX_ARCH: ${{ matrix.TERMUX_ARCH }}
    steps:
      - name: download system.img
        run: |
          ABI=$(
            case $TERMUX_ARCH in
              aarch64) echo arm64-v8a;;
              arm) echo armeabi-v7a;;
              i686) echo x86;;
              x86_64) echo x86_64;;
            esac
          )
          FILE=$( curl -s https://dl.google.com/android/repository/sys-img/android/sys-img2-1.xml | grep -Po "${ABI}-${VERSION}.*\.zip" | head -n1 )
          wget -nv https://dl.google.com/android/repository/sys-img/android/${FILE} -O system.zip
          7z e system.zip ${ABI}/system.img
          7z e system.img super.img
      - name: download lpunpack
        run: |
          python -m pip install -U gdown
          python -m gdown.cli 1h4sGXNI1Al5Y_Te9T8xMWrp3mHw1tke- -O otatools.zip
          unzip -q otatools.zip
          chmod u+x ${LPUNPACK}
      - name: extract system
        run: |
          mkdir super
          ${LPUNPACK} --slot=0 super.img super
          7z x super/system.img -osystem
      - name: extract apex
        run: |
          cd system/system/apex
          ls
          rm -f *.capex
          for APEX in *.apex; do
            NAME=${APEX%.*}
            7z e -aoa ${APEX} apex_payload.img
            7z x apex_payload.img -o${NAME}
          done
          rm *.apex apex_payload.img
      - name: link
        run: |
          cd system
          rm -r apex
          ln -s /system/apex apex
          
          grep -rIl -e . . | xargs file | sed 's|:\s*|:|' | awk -F: '{if($2=="ASCII text, with no line terminators"){print $1}}' | while read f; do
            TO=$(cat $f)
            ln -sf ${TO} ${f}
          done
      - name: chmod
        run: |
          cd system
          find system/bin -type f -print0 | xargs -0 chmod 0755
          chmod 0755 system/xbin/su system/apex/*/bin/*
      - name: remove unneeded
        run: |
          cd system
          rm -r \
            system/fonts \
            system/app \
            system/priv-app \
            system/framework
      - name: archive
        run: |
          cd system
          tar -c -I 'xz -9 -T0' -f ../system-${{ env.TERMUX_ARCH }}-${{ env.VERSION }}.tar.xz *
      - name: store
        uses: actions/upload-artifact@v3
        with:
          name: system-${{ env.TERMUX_ARCH }}-${{ env.VERSION }}
          path: system-${{ env.TERMUX_ARCH }}-${{ env.VERSION }}.tar.xz
  get_bootstrap:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        TERMUX_ARCH: [aarch64, x86_64]
    env:
      TERMUX_ARCH: ${{ matrix.TERMUX_ARCH }}
    steps:
      - name: download bootstrap
        run: |
          wget -nv https://github.com/termux/termux-packages/releases/latest/download/bootstrap-${TERMUX_ARCH}.zip -O bootstrap.zip
      - name: extract
        run: |
          install -d -m 700 usr home
          unzip -q bootstrap.zip -d usr
      - name: link
        run: |
          cd usr
          awk -F← '{system("ln -s "$1" "$2)}' SYMLINKS.txt
          rm SYMLINKS.txt
      - name: chmod
        run: |
          cd usr
          find -type f | sed -e 's|^\./||' | while read f; do
            if [[ "$f" == bin/* ]] ||
              [[ "$f" == libexec* ]] ||
              [[ "$f" == lib/apt/apt-helper* ]] ||
              [[ "$f" == lib/apt/methods* ]]
            then
              chmod 0700 "$f"
            fi
          done
      - name: archive
        run: |
          tar -c -I 'xz -9 -T0' -f termux-files-${{ env.TERMUX_ARCH }}.tar.xz usr home
      - name: store
        uses: actions/upload-artifact@v3
        with:
          name: termux-files-${{ env.TERMUX_ARCH }}
          path: termux-files-${{ env.TERMUX_ARCH }}.tar.xz
  merge_dirs:
    needs: [get_system, get_bootstrap]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        TERMUX_ARCH: [aarch64, x86_64]
    env:
      TERMUX_ARCH: ${{ matrix.TERMUX_ARCH }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: system-${{ env.TERMUX_ARCH }}-${{ env.VERSION }}
      - uses: actions/download-artifact@v3
        with:
          name: termux-files-${{ env.TERMUX_ARCH }}
      - name: extract
        run: |
          mkdir root
          cd root
          tar xf ../system-${TERMUX_ARCH}-${VERSION}.tar.xz
          install -d -m 700 data/data/com.termux/{files,cache}
          tar xf ../termux-files-${TERMUX_ARCH}.tar.xz -C data/data/com.termux/files
      - name: archive
        run: |
          cd root
          tar -c -I 'xz -9 -T0' -f ../termux-base-${{ env.TERMUX_ARCH }}.tar.xz *
      - name: store
        uses: actions/upload-artifact@v3
        with:
          name: termux-base-${{ env.TERMUX_ARCH }}
          path: termux-base-${{ env.TERMUX_ARCH }}.tar.xz
  install_pkgs:
    needs: [merge_dirs]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        TERMUX_ARCH: [aarch64, x86_64]
    env:
      TERMUX_ARCH: ${{ matrix.TERMUX_ARCH }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: termux-base-${{ env.TERMUX_ARCH }}
      - name: extract
        run: |
          mkdir termux-root
          cd termux-root
          tar xf ../termux-base-${TERMUX_ARCH}.tar.xz
      - name: install qemu
        run: |
          sudo apt-get install -y --no-install-recommends qemu-user-static
      - name: chroot termux
        run: |
          cd termux-root
          
          mkdir -p proc dev dev/pts sys
          sudo mount -t proc proc proc
          sudo mount -t devtmpfs udev dev
          sudo mount -t devpts devpts dev/pts
          sudo mount -t sysfs sysfs sys
          
          # set host file
          mkdir -p system/etc
          for host in pypi.python.org files.pythonhosted.org pypi.org \
            github.com objects.githubusercontent.com \
            packages.termux.dev
          do
            echo $( nslookup $host | awk '/^Address: / { print $2; exit }' ) " $host" >> system/etc/hosts
          done
          
          # suppress linker: Warning: failed to find generated linker configuration from "/linkerconfig/ld.config.txt"
          mkdir -p linkerconfig
          touch linkerconfig/ld.config.txt
          
          TERMUX_USER=$( sudo chroot . /system/bin/stat -c '%U' ${TERMUX_PREFIX}/bin/env )
          TERMUX_GROUP=$( sudo chroot . /system/bin/stat -c '%G' ${TERMUX_PREFIX}/bin/env )
          
          TERMUX_USER=system
          
          printf '%s\n' * | grep -v -e ^proc$ -e ^dev$ -e ^sys$ | xargs sudo chroot . /system/xbin/su 0 chown -R ${TERMUX_USER}:${TERMUX_USER}
          
          cat <<SH > /tmp/chroot
          #!/usr/bin/sh
          exec sudo chroot ${PWD} \
            ${TERMUX_PREFIX}/bin/su ${TERMUX_USER} \
            ${TERMUX_PREFIX}/bin/env \
            PATH=${TERMUX_PREFIX}/bin \
            LD_LIBRARY_PATH=${TERMUX_PREFIX}/lib \
            HOME=${TERMUX_HOME} \
            PIP_DISABLE_PIP_VERSION_CHECK=1 \
            "\$@"
          SH
          chmod +x /tmp/chroot
      - name: update
        run: |
          cd termux-root
          /tmp/chroot bash <<BASH
          apt-get update
          apt-get upgrade -y --auto-remove --purge build-essential jq termux-exec python gnupg file git wget curl ndk-sysroot ninja nodejs rust squid
          apt-get clean
          python -m pip install -U --no-cache-dir pip
          BASH
          # reset hosts
          echo | sudo tee system/etc/hosts
      - name: unmount
        run: |
          cd termux-root
          sudo umount -lf sys
          sudo umount -lf dev/pts
          sudo umount -lf dev
          sudo umount -lf proc
      - name: archive
        run: |
          cd termux-root
          sudo tar -c -I 'xz -9 -T0' -f - * > ../termux-${{ env.TERMUX_ARCH }}.tar.xz
      - name: store
        uses: actions/upload-artifact@v3
        with:
          name: termux-${{ env.TERMUX_ARCH }}
          path: termux-${{ env.TERMUX_ARCH }}.tar.xz
      - name: Waiting for debugger
        if: failure()
        uses: mxschmitt/action-tmate@v3
