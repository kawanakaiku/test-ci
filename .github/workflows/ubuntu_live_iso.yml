name: ubuntu_live_iso

# https://github.com/mvallim/live-custom-ubuntu-from-scratch

on:
    push:
      branches: [ main ]
      paths:
        - '.github/workflows/ubuntu_live_iso.yml'
    workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: install
        run: |
          echo "path-exclude=/usr/share/man/*" | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
          sudo apt-get update
          sudo apt-get -y install binutils debootstrap squashfs-tools xorriso grub-pc-bin grub-efi-amd64-bin mtools

      - name: bootstrap
        run: |
          mkdir live-ubuntu-from-scratch
          sudo debootstrap \
            --arch=amd64 \
            --variant=minbase \
            devel \
            live-ubuntu-from-scratch/chroot \
            http://archive.ubuntu.com/ubuntu/

      - name: mount
        run: |
          sudo mount --bind /dev live-ubuntu-from-scratch/chroot/dev
          sudo mount --bind /run live-ubuntu-from-scratch/chroot/run

      - name: chroot
        run: |
          sudo chroot live-ubuntu-from-scratch/chroot /usr/bin/bash <<'chroot'

          set -eu

          mount none -t proc /proc
          mount none -t sysfs /sys
          mount none -t devpts /dev/pts

          export HOME=/root
          export LC_ALL=C

          echo "ubuntu-fs-live" > /etc/hostname

          cat <<'sources_list' > /etc/apt/sources.list
          deb http://archive.ubuntu.com/ubuntu/ devel main restricted universe multiverse
          # deb-src http://archive.ubuntu.com/ubuntu/ devel main restricted universe multiverse

          deb http://archive.ubuntu.com/ubuntu/ devel-security main restricted universe multiverse
          # deb-src http://archive.ubuntu.com/ubuntu/ devel-security main restricted universe multiverse

          deb http://archive.ubuntu.com/ubuntu/ devel-updates main restricted universe multiverse
          # deb-src http://archive.ubuntu.com/ubuntu/ devel-updates main restricted universe multiverse
          sources_list

          apt-get update

          apt-get install -y libterm-readline-gnu-perl systemd-sysv

          dbus-uuidgen > /etc/machine-id
          ln -fs /etc/machine-id /var/lib/dbus/machine-id

          dpkg-divert --local --rename --add /sbin/initctl
          ln -s /bin/true /sbin/initctl

          apt-get -y upgrade

          apt-get install -y \
            sudo \
            ubuntu-standard \
            casper \
            lupin-casper \
            discover \
            laptop-detect \
            os-prober \
            network-manager \
            resolvconf \
            net-tools \
            wireless-tools \
            wpagui \
            locales \
            grub-common \
            grub-gfxpayload-lists \
            grub-pc \
            grub-pc-bin \
            grub2-common

          apt-get install -y --no-install-recommends linux-generic

          apt-get install -y \
            plymouth-theme-ubuntu-logo \
            ubuntu-gnome-desktop \
            ubuntu-gnome-wallpapers

          apt-get install -y \
            apt-transport-https \
            curl \
            vim \
            nano \
            less

          apt-get purge --auto-remove -y

          truncate -s 0 /etc/machine-id

          rm /sbin/initctl
          dpkg-divert --rename --remove /sbin/initctl

          apt-get clean

          rm -rf /tmp/* ~/.bash_history
          umount /proc
          umount /sys
          umount /dev/pts
          export HISTSIZE=0

          chroot

      - name: unmount
        run: |
          sudo umount live-ubuntu-from-scratch/chroot/run
          sudo umount live-ubuntu-from-scratch/chroot/dev

      - name: create cd image
        run: |
          cd live-ubuntu-from-scratch

          mkdir -p image/{casper,isolinux,install}

          sudo cp chroot/boot/vmlinuz-**-**-generic image/casper/vmlinuz
          sudo cp chroot/boot/initrd.img-**-**-generic image/casper/initrd

          sudo cp chroot/boot/memtest86+.bin image/install/memtest86+

          wget --progress=dot https://www.memtest86.com/downloads/memtest86-usb.zip -O image/install/memtest86-usb.zip
          unzip -p image/install/memtest86-usb.zip memtest86-usb.img > image/install/memtest86
          rm -f image/install/memtest86-usb.zip

      - name: configure grub
        run: |
          cd live-ubuntu-from-scratch

          touch image/ubuntu

          cat <<'grub_cfg' > image/isolinux/grub.cfg
          search --set=root --file /ubuntu
          insmod all_video
          set default="0"
          set timeout=30

          menuentry "Try Ubuntu FS without installing" {
          linux /casper/vmlinuz boot=casper nopersistent toram quiet splash ---
          initrd /casper/initrd
          }

          menuentry "Install Ubuntu FS" {
          linux /casper/vmlinuz boot=casper only-ubiquity quiet splash ---
          initrd /casper/initrd
          }

          menuentry "Check disc for defects" {
            linux /casper/vmlinuz boot=casper integrity-check quiet splash ---
            initrd /casper/initrd
          }

          menuentry "Test memory Memtest86+ (BIOS)" {
            linux16 /install/memtest86+
          }

          menuentry "Test memory Memtest86 (UEFI, long load time)" {
            insmod part_gpt
            insmod search_fs_uuid
            insmod chain
            loopback loop /install/memtest86
            chainloader (loop,gpt1)/efi/boot/BOOTX64.efi
          }
          grub_cfg

      - name: create manifest
        run: |
          cd live-ubuntu-from-scratch

          sudo chroot chroot dpkg-query -W --showformat='${Package} ${Version}\n' | sudo tee image/casper/filesystem.manifest
          sudo cp -v image/casper/filesystem.manifest image/casper/filesystem.manifest-desktop
          sudo sed -i '/ubiquity/d' image/casper/filesystem.manifest-desktop
          sudo sed -i '/casper/d' image/casper/filesystem.manifest-desktop
          sudo sed -i '/discover/d' image/casper/filesystem.manifest-desktop
          sudo sed -i '/laptop-detect/d' image/casper/filesystem.manifest-desktop
          sudo sed -i '/os-prober/d' image/casper/filesystem.manifest-desktop

      - name: compress image
        run: |
          cd live-ubuntu-from-scratch

          sudo mksquashfs chroot image/casper/filesystem.squashfs -comp xz -Xdict-size 100%

          printf $(sudo du -sx --block-size=1 chroot | cut -f1) > image/casper/filesystem.size

      - name: create diskdefines
        run: |
          cd live-ubuntu-from-scratch

          cat <<'diskdefines' > image/README.diskdefines
          #define DISKNAME  Ubuntu from scratch
          #define TYPE  binary
          #define TYPEbinary  1
          #define ARCH  amd64
          #define ARCHamd64  1
          #define DISKNUM  1
          #define DISKNUM1  1
          #define TOTALNUM  0
          #define TOTALNUM0  1
          diskdefines

      - name: create iso
        run: |
          cd live-ubuntu-from-scratch/image

          grub-mkstandalone \
            --format=x86_64-efi \
            --output=isolinux/bootx64.efi \
            --locales="" \
            --fonts="" \
            "boot/grub/grub.cfg=isolinux/grub.cfg"

          (
            cd isolinux && \
            dd if=/dev/zero of=efiboot.img bs=1M count=10 && \
            sudo mkfs.vfat efiboot.img && \
            LC_CTYPE=C mmd -i efiboot.img efi efi/boot && \
            LC_CTYPE=C mcopy -i efiboot.img ./bootx64.efi ::efi/boot/
          )

          grub-mkstandalone \
            --format=i386-pc \
            --output=isolinux/core.img \
            --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" \
            --modules="linux16 linux normal iso9660 biosdisk search" \
            --locales="" \
            --fonts="" \
            "boot/grub/grub.cfg=isolinux/grub.cfg"

          cat /usr/lib/grub/i386-pc/cdboot.img isolinux/core.img > isolinux/bios.img

          sudo /bin/bash <<'bash'
            find . -type f -print0 | xargs -0 md5sum | grep -v -e 'md5sum.txt' -e 'bios.img' -e 'efiboot.img' > md5sum.txt
          bash

          sudo xorriso \
          -as mkisofs \
          -iso-level 3 \
          -full-iso9660-filenames \
          -volid "Ubuntu from scratch" \
          -output "../ubuntu-from-scratch.iso" \
          -eltorito-boot boot/grub/bios.img \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            --eltorito-catalog boot/grub/boot.cat \
            --grub2-boot-info \
            --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
          -eltorito-alt-boot \
            -e EFI/efiboot.img \
            -no-emul-boot \
          -append_partition 2 0xef isolinux/efiboot.img \
          -m "isolinux/efiboot.img" \
          -m "isolinux/bios.img" \
          -graft-points \
            "/EFI/efiboot.img=isolinux/efiboot.img" \
            "/boot/grub/bios.img=isolinux/bios.img" \
            "."

      - name: built file info
        run: |
          file ubuntu-from-scratch.iso
          sha256sum ubuntu-from-scratch.iso

      - name: Store built file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-from-scratch
          path: ubuntu-from-scratch.iso
